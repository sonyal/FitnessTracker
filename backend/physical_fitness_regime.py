import json
import math

"""
Physical workout regime is based upon the 5/3/1 Boring But Big Challenge
Further description can be found at: https://www.t-nation.com/workouts/boring-but-big-3-month-challenge
Genuine testimony of this regime can be found at:
https://www.reddit.com/r/weightroom/comments/1d54x7/my_experience_with_the_531_bbb_3month_challenge/
"""

"""
Variables used for creating workouts
"""
endurance_reps = 10
endurance_scale = 0.6
endurance_sets = 5
power_scale = [0.4, 0.5, 0.6, 0.75, 0.8, 0.85]
power_reps = [5, 5, 3, 5, 5, 5]


class Tester:
    pass


def make_month_workout_json(request: dict) -> json:
    """ Upon calling make_month_workout_json, a workout is made using make_month_workout and is then dumped into a
    json object with pretty printing formatting

     Args:
        request: a dictionary containing the max weight the user can do in a single repetition
     Example Args:
        {'overhead_press': 100, 'bench_press': 145, 'squat': 225, 'deadlift': 285}
        Note: this should ONLY be called from physical_fitness_proxy.py as all inputs are verified

     Returns:
        json: A JSON object with a month physical workout regime
    """
    return json.dumps(make_month_workout(request), indent=4)


def make_month_workout(request: dict) -> dict:
    """ Upon calling make_month_workout, four weeks of workouts are generated by calling make_week_workout

     Args:
        request: a dictionary containing the max weight the user can do in a single repetition

     Returns:
        dict: A dictionary with the physical workout regime adjusted for the user's strength
    """
    workout = {}
    for week in range(1, 5):
        current_week = 'week-' + str(week)
        workout[current_week] = make_week_workout(request)
    return workout


def make_week_workout(request: dict) -> dict:
    """ Upon calling make_month_workout, a single weeks of workouts are generated following the Boring But Big Challenge
    descriptions of this workout regime can be found here:
        https://www.t-nation.com/workouts/boring-but-big-3-month-challenge

     Summary:
        This workout consists of rotating power/endurance workouts primarily for overhead press / bench press for
        upper body and squat / deadlift for lower body.

        Accessories are not vital to the workout regime, but offer additional ways to extend the muscle development
        thus are highly recommended and included in the workout (but in the accessory section). Typically these
        workouts focus on a single area of the body whereas the core workouts are important to overall strength
        growth

     Args:
        request: a dictionary containing the max weight the user can do in a single repetition

     Returns:
        dict: A dictionary with the physical workout regime adjusted for the user's strength
    """
    workout = {}
    monday_request = {'power': ('overhead_press', request['overhead_press']),
                      'endurance': ('bench_press', request['bench_press'])}
    workout['monday'] = make_upper_body_workout(monday_request)

    wednesday_request = {'power': ('deadlift', request['deadlift']),
                         'endurance': ('squat', request['squat'])}
    workout['wednesday'] = make_lower_body_workout(wednesday_request)

    friday_request = {'power': ('bench_press', request['bench_press']),
                      'endurance': ('overhead_press', request['overhead_press'])}
    workout['friday'] = make_upper_body_workout(friday_request)

    sunday_request = {'power': ('squat', request['squat']),
                      'endurance': ('deadlift', request['deadlift'])}
    workout['sunday'] = make_lower_body_workout(sunday_request)
    return workout


def make_upper_body_workout(request: dict) -> dict:
    """ Upon calling make_upper_body_workout, a upper body routine is made based off the request

     Args:
        request: a dictionary with two values
            power: a tuple with the workout name and the maximum weight the user can do for this workout
            endurance: a tuple with the workout name and the maximum weight the user can do for this workout

     Returns:
        dict: A dictionary with an upper body workout adjusted for the user's strength
    """
    (power_workout, power_max) = request['power']
    (endurance_workout, endurance_max) = request['endurance']
    return {'core': {power_workout: make_power_core_workout(power_max),
                     endurance_workout: make_endurance_core_workout(endurance_max)},
            'accessory': make_upper_body_accessory()}


def make_lower_body_workout(request: dict) -> dict:
    """ Upon calling make_lower_body_workout, a lower body routine is made based off the request

     Args:
        request: a dictionary with two values
            power: a tuple with the workout name and the maximum weight the user can do for this workout
            endurance: a tuple with the workout name and the maximum weight the user can do for this workout

     Returns:
        dict: A dictionary with an upper body workout adjusted for the user's strength
    """
    (power_workout, power_max) = request['power']
    (endurance_workout, endurance_max) = request['endurance']
    return {'core': {power_workout: make_power_core_workout(power_max),
                     endurance_workout: make_endurance_core_workout(endurance_max)},
            'accessory': make_lower_body_accessory()}


def make_power_core_workout(max_weight: int) -> dict:
    """ Upon calling make_power_core_workout, a power workout is generated based on the user's strength

     Args:
        max_weight: the max weight the user can do for this workout

     Returns:
        dict: A dictionary with the specific details for this individual workout based on the user's strength
    """
    workout = {}
    current_set = 1
    for index in range(len(power_reps)):
        next_set_name = 'set-' + str(current_set)
        set_weight = int(math.ceil(power_scale[index] * max_weight))
        set_reps = power_reps[index]
        workout[next_set_name] = make_set(set_reps, set_weight)
        current_set += 1
    return workout


def make_endurance_core_workout(max_weight: int) -> dict:
    """ Upon calling make_power_core_workout, a endurance workout is generated based on the user's strength

     Args:
        max_weight: the max weight the user can do for this workout

     Returns:
        dict: A dictionary with the specific details for this individual workout based on the user's strength
    """
    workout = {}
    current_set = 1
    for index in range(endurance_sets):
        next_set_name = 'set-' + str(current_set)
        set_weight = int(math.ceil(endurance_scale * max_weight))
        workout[next_set_name] = make_set(endurance_reps, set_weight)
        current_set += 1
    return workout


def make_set(reps: int, weight: int) -> dict:
    """ Upon calling make_set, a set is formatted for a JSON conversion later

     Args:
        reps: the number of repetitions the user should do for this workout
        weight: weight for this set

     Returns:
        dict: A dictionary specifying how many reps and the weight the user should do
    """
    return {'reps': reps, 'weight': weight}


def make_upper_body_accessory() -> dict:
    """ Upon calling make_upper_body_accessory, an upper body accessory workout is generated for the user
    
    There are no arguments for this function because it is flexible, as in, the user should freely move between weights
    depending on how they feel after doing the core workout

     Returns:
        dict: A dictionary with the specific details for which workouts to do with details for each
    """
    return {'curls': make_accessory_set(), 'tricep_pushdown': make_accessory_set(), 'face_pulls': make_accessory_set()}


def make_lower_body_accessory() -> dict:
    """ Upon calling make_lower_body_accessory, an upper body accessory workout is generated for the user
    
    There are no arguments for this function because it is flexible, as in, the user should freely move between weights
    depending on how they feel after doing the core workout

     Returns:
        dict: A dictionary with the specific details for which workouts to do with details for each
    """
    return {'ab_wheel': make_accessory_set(), 'situp': make_accessory_set(), 'russian_twists': make_accessory_set()}


def make_accessory_set() -> dict:
    """ Upon calling make_accessory_set, an accessory set / repetition is made based on what is recommended for
    accessories in the Boring But Big workout regime

     Returns:
        dict: A dictionary with specific details for the accessory sets
    """
    return {'sets': 3, 'reps': 10}
