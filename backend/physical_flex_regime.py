import json
import math

"""
Flexibility workout regime is based upon the 5/3/1 Boring But Big Challenge
Further description can be found at: https://www.t-nation.com/workouts/boring-but-big-3-month-challenge
Genuine testimony of this regime can be found at:
https://www.reddit.com/r/weightroom/comments/1d54x7/my_experience_with_the_531_bbb_3month_challenge/
"""


def make_month_workout_json(request: dict) -> json:
    """ Upon calling make_month_workout_json, a workout is made using make_month_workout and is then dumped into a
    json object with pretty printing formatting

     Args:
        request: a dictionary containing the max reps the user can do in a single session
     Example Args:
        {'triceps stretch': 100, 'Neck-and-Shoulder Release': 145, 'sit and reach': 225, 'up and over': 285}
        Note: this should ONLY be called from physical_flex_proxy.py as all inputs are verified

     Returns:
        json: A JSON object with a month flexibility workout regime
    """
    return json.dumps(make_month_workout(request), indent=4)


def make_month_workout(request: dict) -> dict:
    """ Upon calling make_month_workout, four weeks of workouts are generated by calling make_week_workout

     Args:
        request: a dictionary containing the max reps the user can do in a single session

     Returns:
        dict: A dictionary with the flex workout regime adjusted for the user's flexibility
    """
    workout = {}
    for week in range(1, 5):
        current_week = 'week-' + str(week)
        workout[current_week] = make_week_workout(request)
    return workout


def make_week_workout(request: dict) -> dict:
    """ Upon calling make_month_workout, a single weeks of workouts are generated following the Boring But Big Challenge
    descriptions of this workout regime can be found here:
        https://www.t-nation.com/workouts/boring-but-big-3-month-challenge

     Summary:
        This workout consists of rotating upper and lower body stretches primarily for tricep stretch and neck and shoulder release for
        upper body and sit and reach / up and over for lower body.

     Args:
        request: a dictionary containing the max reps the user can do in a single session

     Returns:
        dict: A dictionary with the flexibility workout regime adjusted for the user's flexibility
    """
    workout = {}
    monday_request = {'upper': ('triceps stretch', request['triceps stretch']),
                      'lower': ('sit and reach', request['sit and reach']), 'day': ('monday', 0)}
    workout['monday'] = make_plan(monday_request)

    wednesday_request = {'upper': ('Neck-and-Shoulder Release', request['Neck-and-Shoulder Release']),
                         'lower': ('sit and reach', request['sit and reach']), 'day': ('wednesday', 1)}
    workout['wednesday'] = make_plan(wednesday_request)

    friday_request = {'upper': ('triceps stretch', request['triceps stretch']),
                      'lower': ('up and over', request['up and over']), 'day': ('friday', 2)}
    workout['friday'] = make_plan(friday_request)

    sunday_request = {'upper': ('Neck-and-Shoulder Release', request['Neck-and-Shoulder Release']),
                      'lower': ('up and over', request['up and over']), 'day': ('sunday', 3)}
    workout['sunday'] = make_plan(sunday_request)

    return workout


def make_plan(request: dict) -> dict:
    """ Upon calling make_plan, a day's routine is made based off the request

     Args:
        request: a dictionary with 3 values
            upper: a tuple with the workout name and the maximum reps the user can do for this workout
            lower: a tuple with the workout name and the maximum reps the user can do for this workout
            day: a tuple with the day of the week and index of that day within a week

     Returns:
        dict: A dictionary with a day's workout adjusted for the user's flexibility
    """
    (upper_workout, upper_max) = request['upper']
    (lower_workout, lower_max) = request['lower']
    (date, day) = request['day']
    return {'upper': {upper_workout: make_upper_workout(upper_workout, upper_max, day)}, 'lower':
        {lower_workout: make_lower_workout(lower_workout, lower_max, day)}}


def make_upper_workout(name: str, max, day: int) -> dict:
    """ Upon calling make_upper_workout, an upper body workout is generated based on the user's flexibility

     Args:
        name: name of workout
        max: the max reps the user can do for this workout
        day: day of the week this workout is to be completed

     Returns:
        dict: A dictionary with the specific details for  each upper body exercise based on the user's flexibility
    """

    workout = {}
    if day == 0:
        workout['number'] = int(0.5 * int(max))
    else:
        workout['number'] = int(0.9 * int(max))

    return workout


def make_lower_workout(name: str, max, day: int) -> dict:
    """ Upon calling make_lower_workout, an lower body workout is generated based on the user's flexibility

     Args:
        name: name of workout
        max: the max reps the user can do for this workout
        day: day of the week this workout is to be completed

     Returns:
        dict: A dictionary with the specific details for  each lower body exercise based on the user's flexibility
    """
    workout = {}
    if day == 0:
        workout['number'] = int(0.5 * int(max))
    else:
        workout['number'] = int(0.9 * int(max))

    return workout