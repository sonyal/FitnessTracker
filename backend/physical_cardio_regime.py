import json
import math

"""
Physical cardio regime is based upon the 5/3/1 Boring But Big Challenge
Further description can be found at: https://www.t-nation.com/workouts/boring-but-big-3-month-challenge
Genuine testimony of this regime can be found at:
https://www.reddit.com/r/weightroom/comments/1d54x7/my_experience_with_the_531_bbb_3month_challenge/
"""


def make_month_workout_json(request: dict) -> json:
    """ Upon calling make_month_workout_json, a workout is made using make_month_workout and is then dumped into a
    json object with pretty printing formatting

     Args:
        request: a dictionary containing the max amount of distance/reps the user can do in a single session
     Example Args:
        {'jumping jacks': 50, 'jog': 8, 'jump ropes': 225, 'swim': 5}
        Note: this should ONLY be called from physical_cardio_proxy.py as all inputs are verified

     Returns:
        json: A JSON object with a month physical workout regime
    """
    return json.dumps(make_month_workout(request), indent=4)


def make_month_workout(request: dict) -> dict:
    """ Upon calling make_month_workout, four weeks of workouts are generated by calling make_week_workout

     Args:
        request: a dictionary containing the max distance/reps the user can do in a single session

     Returns:
        dict: A dictionary with the cardio workout regime adjusted for the user's endurance
    """
    workout = {}
    for week in range(1, 5):
        current_week = 'week-' + str(week)
        workout[current_week] = make_week_workout(request)
    return workout


def make_week_workout(request: dict) -> dict:
    """ Upon calling make_week_workout, a single weeks of workouts are generated following the Boring But Big Challenge
    descriptions of this workout regime can be found here:
        https://www.t-nation.com/workouts/boring-but-big-3-month-challenge

     Summary:
        This workout consists of rotating indoor/outdoor workouts primarily for jogging, swimming, jumping jacks, and jump rope

     Args:
        request: a dictionary containing the max distance/reps the user can do in a single session

     Returns:
        dict: A dictionary with the cardio workout regime adjusted for the user's endurance
    """
    workout = {}
    monday_request = {'indoor': ('jumping jacks', request['jumping jacks']),
                      'outdoor': ('jog', request['jog']), 'day': ('monday', 0)}
    workout['monday'] = make_plan(monday_request)

    wednesday_request = {'indoor': ('jump ropes', request['jump ropes']),
                         'outdoor': ('jog', request['jog']), 'day': ('wednesday', 1)}
    workout['wednesday'] = make_plan(wednesday_request)

    friday_request = {'indoor': ('jumping jacks', request['jumping jacks']),
                      'outdoor': ('swim', request['swim']), 'day': ('friday', 2)}
    workout['friday'] = make_plan(friday_request)

    sunday_request = {'indoor': ('jump ropes', request['jump ropes']),
                      'outdoor': ('swim', request['swim']), 'day': ('sunday', 3)}
    workout['sunday'] = make_plan(sunday_request)

    return workout


def make_plan(request: dict) -> dict:
    """ Upon calling make_plan, a day's routine is made based off the request

     Args:
        request: a dictionary with 3 values
            indoor: a tuple with the workout name and the maximum reps the user can do for this workout
            outdoor: a tuple with the workout name and the maximum distance the user can do for this workout
            day: a tuple with the day of the week and index of that day within a week

     Returns:
        dict: A dictionary with a day's workout adjusted for the user's endurance
    """
    (indoor_workout, indoor_max) = request['indoor']
    (outdoor_workout, outdoor_max) = request['outdoor']
    (date, day) = request['day']
    return {'indoor': {indoor_workout: make_indoor_workout(indoor_workout, indoor_max, day)}, 'outdoor':
        {outdoor_workout: make_outdoor_workout(outdoor_workout, outdoor_max, day)}}


def make_indoor_workout(name: str, max, day: int) -> dict:
    """ Upon calling make_indoor_workout, an indoor workout is generated based on the user's endurance

     Args:
        name: name of workout
        max: the max reps the user can do for this workout
        day: day of the week this workout is to be completed

     Returns:
        dict: A dictionary with the specific details for  each indoor exercise based on the user's endurance
    """

    workout = {}
    if name == 'jumping jacks':
        if day == 0:
            workout['number'] = int(0.5 * int(max))
        else:
            workout['number'] = int(0.9 * int(max))
    else:
        if day == 1:
            workout['minutes'] = 0.9 * float(max)
        else:
            workout['minutes'] = 0.5 * float(max)
    return workout


def make_outdoor_workout(name: str, max, day: int) -> dict:
    """ Upon calling make_outdoor_workout, an outdoor workout is generated based on the user's endurance

     Args:
        name: name of workout
        max: the max distance the user can do for this workout
        day: day of the week this workout is to be completed

     Returns:
        dict: A dictionary with the specific details for each outdoor exercise based on the user's endurance
    """

    workout = {}
    if name == 'jog':
        if day == 0:
            workout['length'] = 0.5 * float(max)
        else:
            workout['length'] = 0.9 * float(max)
    else:
        if day == 2:
            workout['length'] = 0.8 * float(max)
        else:
            workout['length'] = 0.5 * float(max)
    return workout
